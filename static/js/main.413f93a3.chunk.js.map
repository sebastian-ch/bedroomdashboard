{"version":3,"sources":["Time.js","Sunrise.js","App.js","reportWebVitals.js","index.js"],"names":["Time","today","Date","tTime","getHours","slice","getMinutes","getSeconds","dd","String","getDate","padStart","tDate","getMonth","getFullYear","useState","time","setTime","useEffect","setInterval","className","Sunrise","sunrise","setSunrise","latlng","tomorrow","setDate","fetchDate","structureDate","x","mm","console","log","fetch","then","results","json","data","utcDate","locDate","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAsCeA,MApCf,WAEI,IAAIC,EAAQ,IAAIC,KACZC,GAAS,IAAIF,EAAMG,YAAYC,OAAO,GAAM,KAAO,IAAIJ,EAAMK,cAAcD,OAAO,GAAK,KAAO,IAAIJ,EAAMM,cAAcF,OAAO,GAC7HG,EAAKC,OAAOR,EAAMS,WAAWC,SAAS,EAAG,KAIzCC,EAHKH,OAAOR,EAAMY,WAAa,GAAGF,SAAS,EAAG,KAGjC,IAAMH,EAAK,IAFjBP,EAAMa,cAIjB,EAAwBC,mBAASZ,GAAjC,mBAAOa,EAAP,KAAaC,EAAb,KACA,EAA6BF,mBAASH,GAAtC,mBAeA,OAfA,UAGAM,qBAAU,WAENC,aAAY,WACRlB,EAAQ,IAAIC,KACZC,GAAS,IAAIF,EAAMG,YAAYC,OAAO,GAAM,KAAO,IAAIJ,EAAMK,cAAcD,OAAO,GAAK,KAAO,IAAIJ,EAAMM,cAAcF,OAAO,GAC7HY,EAAQd,KACN,OAER,IAKE,gCACI,sBAAMiB,UAAU,OAAhB,SAAuB,6BAAKR,MAC5B,sBAAMQ,UAAU,OAAhB,SAAuB,6BAAKJ,U,MCsBzBK,MAlDf,WAEI,MAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAS,CAAC,OAAQ,QAEpBvB,EAAQ,IAAIC,KACZuB,EAAW,IAAIvB,KAAKD,GACxBwB,EAASC,QAAQD,EAASf,UAAY,GACtC,IAAIiB,EAAYC,EAAc3B,GAS9B,SAAS2B,EAAcC,GACnB,IAAIrB,EAAKC,OAAOoB,EAAEnB,WAAWC,SAAS,EAAG,KACrCmB,EAAKrB,OAAOoB,EAAEhB,WAAa,GAAGF,SAAS,EAAG,KAG9C,OAFWkB,EAAEf,cACM,IAAMgB,EAAK,IAAMtB,EAuBxC,OAlCgBP,EAAMG,YAEL,IACbuB,EAAYC,EAAcH,IAG9BM,QAAQC,IAAIL,GAUZT,qBAAU,WAENe,MAAM,2CAAD,OAA4CT,EAAO,GAAnD,gBAA6DA,EAAO,GAApE,iBAA+EG,EAA/E,iBACAO,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACFN,QAAQC,IAAIK,EAAKF,QAAQb,SACzB,IAAIgB,EAAUD,EAAKF,QAAQb,QACvBiB,EAAU,IAAIrC,KAAKoC,GACvBP,QAAQC,IAAIO,EAAQnC,WAAa,IAAMmC,EAAQjC,cAC/CiB,EAAWgB,EAAQnC,WAAa,IAAMmC,EAAQjC,mBAKvD,IAKC,sBAAKc,UAAU,UAAf,sBAAmCE,EAAnC,UCpCOkB,MATf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCIUqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.413f93a3.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\n\r\nfunction Time() {\r\n\r\n    let today = new Date();\r\n    let tTime = ('0'+today.getHours()).slice(-2)  + ':' + ('0'+today.getMinutes()).slice(-2) + ':' + ('0'+today.getSeconds()).slice(-2);\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear(); \r\n\r\n    let tDate = mm + '/' + dd + '/' + yyyy;\r\n\r\n    const [time, setTime] = useState(tTime);\r\n    const [currentDay, setDay] = useState(tDate);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setInterval(() => {\r\n            today = new Date();\r\n            tTime = ('0'+today.getHours()).slice(-2)  + ':' + ('0'+today.getMinutes()).slice(-2) + ':' + ('0'+today.getSeconds()).slice(-2);\r\n            setTime(tTime);\r\n            },1000)\r\n\r\n    },[])\r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <span className='date'><h1>{tDate}</h1></span>\r\n            <span className='time'><h1>{time}</h1></span>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Time;","import {useState, useEffect} from 'react'\r\n\r\n\r\nfunction Sunrise() {\r\n\r\n    const [sunrise, setSunrise] = useState([])\r\n\r\n    const latlng = [34.17, -118.61];\r\n\r\n    let today = new Date();\r\n    let tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    let fetchDate = structureDate(today)\r\n\r\n    let todayHour = today.getHours()\r\n\r\n    if (todayHour >= 7) {\r\n        fetchDate = structureDate(tomorrow)\r\n    }\r\n\r\n    console.log(fetchDate)\r\n    function structureDate(x) {\r\n        var dd = String(x.getDate()).padStart(2, '0');\r\n        var mm = String(x.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = x.getFullYear(); \r\n        let tDate = yyyy + '-' + mm + '-' + dd;\r\n        return tDate;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`https://api.sunrise-sunset.org/json?lat=${latlng[0]}&lng=${latlng[1]}&date=${fetchDate}&formatted=0`)\r\n            .then(results => results.json())\r\n            .then(data => {\r\n                console.log(data.results.sunrise);\r\n                var utcDate = data.results.sunrise;\r\n                var locDate = new Date(utcDate) \r\n                console.log(locDate.getHours() + \":\" + locDate.getMinutes());\r\n                setSunrise(locDate.getHours() + \":\" + locDate.getMinutes())\r\n                //setSunrise(data.results.sunrise);\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className='sunrise'>Sunrise: {sunrise} AM</div>\r\n    )\r\n}\r\n\r\nexport default Sunrise;","import Time from './Time'\nimport './App.css';\nimport Sunrise from './Sunrise';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Time />\n     <Sunrise />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}