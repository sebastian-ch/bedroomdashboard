{"version":3,"sources":["Time.js","Sunrise.js","Wiki.js","App.js","reportWebVitals.js","index.js"],"names":["Time","today","Date","tTime","getHours","slice","getMinutes","dd","String","getDate","padStart","tDate","getMonth","getFullYear","useState","time","setTime","useEffect","setInterval","className","Sunrise","sunrise","setSunrise","greeting","setGreeting","latlng","tomorrow","setDate","fetchDate","structureDate","todayHour","x","mm","Greeting","console","log","fetch","then","results","json","data","utcDate","locDate","Wiki","rando","setRando","getWiki","res","thumbnail","src","source","width","height","title","description","extract","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f899069c.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\n\r\nfunction Time() {\r\n\r\n    let today = new Date();\r\n    //let tTime = ('0'+today.getHours()).slice(-2)  + ':' + ('0'+today.getMinutes()).slice(-2) + ':' + ('0'+today.getSeconds()).slice(-2);\r\n    let tTime = ('0'+today.getHours()).slice(-2)  + ':' + ('0'+today.getMinutes()).slice(-2);\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear(); \r\n\r\n    let tDate = mm + '/' + dd + '/' + yyyy;\r\n\r\n    const [time, setTime] = useState(tTime);\r\n    const [currentDay, setDay] = useState(tDate);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setInterval(() => {\r\n            today = new Date();\r\n            tTime = ('0'+today.getHours()).slice(-2)  + ':' + ('0'+today.getMinutes()).slice(-2);\r\n            setTime(tTime);\r\n            },60000)\r\n\r\n    },[])\r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <span className='date'>{tDate}</span>\r\n            <span className='time'><h1>{time}</h1></span>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Time;","import {useState, useEffect} from 'react'\r\n\r\n\r\nfunction Sunrise() {\r\n\r\n    const [sunrise, setSunrise] = useState([])\r\n    const [greeting, setGreeting] = useState([])\r\n\r\n    const latlng = [34.17, -118.61];\r\n\r\n    let today = new Date();\r\n    let tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    let fetchDate = structureDate(today)\r\n\r\n    let todayHour = today.getHours()\r\n\r\n    if (todayHour >= 7) {\r\n        fetchDate = structureDate(tomorrow)\r\n    }\r\n\r\n    console.log(fetchDate)\r\n    function structureDate(x) {\r\n        var dd = String(x.getDate()).padStart(2, '0');\r\n        var mm = String(x.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = x.getFullYear(); \r\n        let tDate = yyyy + '-' + mm + '-' + dd;\r\n        return tDate;\r\n    }\r\n\r\n    function Greeting(){\r\n        console.log(todayHour);\r\n        if(todayHour < 12) {\r\n            setGreeting('Good Morning')\r\n        } else if(13 <= todayHour && todayHour <= 18) {\r\n            setGreeting('Good Afternoon')\r\n        } else if (18 < todayHour) {\r\n            setGreeting('Good Evening')\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`https://api.sunrise-sunset.org/json?lat=${latlng[0]}&lng=${latlng[1]}&date=${fetchDate}&formatted=0`)\r\n            .then(results => results.json())\r\n            .then(data => {\r\n                console.log(data.results.sunrise);\r\n                var utcDate = data.results.sunrise;\r\n                var locDate = new Date(utcDate) \r\n                console.log(locDate.getHours() + \":\" + locDate.getMinutes());\r\n                setSunrise(locDate.getHours() + \":\" + locDate.getMinutes())\r\n                //setSunrise(data.results.sunrise);\r\n            })\r\n        Greeting()\r\n        setInterval(() => {\r\n\r\n            console.log('hour: ' + todayHour)\r\n            Greeting()\r\n        },3600000)\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='greet' >{greeting}, Sebastian</div>\r\n            <div className='sunrise'>Sunrise: {sunrise} AM</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sunrise;","import {useEffect, useState} from 'react';\r\n\r\nfunction Wiki() {\r\n\r\n    const [rando, setRando] = useState([])\r\n\r\n    //getWiki();\r\n    function getWiki() {\r\n        fetch(\"https://en.wikipedia.org/api/rest_v1/page/random/summary\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setRando(data);\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWiki();\r\n        setInterval(() => {\r\n            getWiki()\r\n        }, 3600000)\r\n        \r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className='wiki'>\r\n            {rando.thumbnail ? <div>\r\n                <img src={rando.thumbnail.source} width={rando.thumbnail.width} height={rando.thumbnail.height}/>\r\n                <div className='wiki-title'><b>{rando.title}</b></div>\r\n                <div>{rando.description}</div>\r\n                <div className='wiki-desc'>{rando.extract}</div>\r\n            </div> : <div>loading..</div> }\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wiki;","import Time from './Time'\nimport './App.css';\nimport Sunrise from './Sunrise';\nimport Wiki from './Wiki';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Time />\n     <Sunrise />\n     <div className='rows'>\n     <Wiki />\n     <div>Right Side</div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}